type storage = {
  yes: int,
  no: int
};

type parameter =
| ["Vote", int]
| ["Access"]
| ["Reset"]

type return_ = [list <operation>, storage];

/* entrypoints */
const voteProposal = ([store, vote] : [storage, int]) : storage => {
  
  let temp_store = store;

  if (vote == 1) {
    temp_store.yes = store.yes + 1;
  }
  else if (vote == 2) {
    temp_store.no = store.no + 1;
  }

  const result = temp_store;
  return result;
}

const accessProposal = (store: storage) : storage => {
  let result = store;
  return result;
}

const resetProposal = (store: storage) : storage => {
  let temp_store = store;

  temp_store.yes = 0;
  temp_store.no = 0;

  const result = temp_store;
  return result;
}

/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */
const main = ([action, store] : [parameter, storage]) : return_ => {
 return [
   (list([]) as list <operation>),
   (match (action, {
    Vote: (n: int) => voteProposal([store, n]),
    Access: () => accessProposal(store),
    Reset: () => resetProposal(store),
    }))
  ]
};
